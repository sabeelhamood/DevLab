version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devlab-postgres
    environment:
      POSTGRES_DB: devlab
      POSTGRES_USER: devlab
      POSTGRES_PASSWORD: devlab_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - devlab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devlab -d devlab"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devlab-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devlab-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: devlab-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: devlab
      RABBITMQ_DEFAULT_PASS: devlab_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - devlab-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devlab-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://devlab:devlab_password@postgres:5432/devlab
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://devlab:devlab_password@rabbitmq:5672
      JWT_SECRET: dev-secret-key
      GEMINI_API_KEY: dev-gemini-key
      SANDBOX_API_URL: http://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - devlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devlab-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000/api
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - devlab-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: devlab-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - devlab-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: devlab-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - devlab-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  devlab-network:
    driver: bridge
