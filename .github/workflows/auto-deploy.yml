name: Auto Deploy to Vercel and Railway

# Trigger on every push to main branch
on:
  push:
    branches: [ main ]

jobs:
  # Job 1: Trigger Vercel deployment
  vercel-trigger:
    name: Trigger Vercel Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Vercel Deployment
        run: |
          echo "üöÄ Triggering Vercel deployment..."
          echo "Project ID: ${{ secrets.VERCEL_PROJECT_ID }}"
          
          # Check if secrets are available
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ùå VERCEL_TOKEN is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID is not set"
            exit 1
          fi
          
          # Trigger Vercel deployment using REST API (simplified payload)
          RESPONSE=$(curl -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"projectId\": \"${{ secrets.VERCEL_PROJECT_ID }}\"}" \
            -w "\nHTTP Status: %{http_code}\n" \
            -s)
          
          echo "Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q "HTTP Status: 200"; then
            echo "‚úÖ Vercel deployment triggered successfully"
          else
            echo "‚ùå Vercel deployment failed"
            exit 1
          fi

  # Job 2: Trigger Railway deployment  
  railway-trigger:
    name: Trigger Railway Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Railway Deployment
        run: |
          echo "üöÇ Triggering Railway deployment..."
          echo "Project ID: ${{ secrets.RAILWAY_PROJECT_ID }}"
          echo "Service ID: ${{ secrets.RAILWAY_SERVICE_ID }}"
          
          # Check if secrets are available
          if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "‚ùå RAILWAY_TOKEN is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.RAILWAY_PROJECT_ID }}" ]; then
            echo "‚ùå RAILWAY_PROJECT_ID is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.RAILWAY_SERVICE_ID }}" ]; then
            echo "‚ùå RAILWAY_SERVICE_ID is not set"
            exit 1
          fi
          
          # Trigger Railway deployment using GraphQL API
          RESPONSE=$(curl -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { deploymentCreate(input: { projectId: \\\"${{ secrets.RAILWAY_PROJECT_ID }}\\\", serviceId: \\\"${{ secrets.RAILWAY_SERVICE_ID }}\\\" }) { id } }\"}" \
            -w "\nHTTP Status: %{http_code}\n" \
            -s)
          
          echo "Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q "HTTP Status: 200"; then
            echo "‚úÖ Railway deployment triggered successfully"
          else
            echo "‚ùå Railway deployment failed"
            exit 1
          fi

  # Job 3: Deployment Status Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [vercel-trigger, railway-trigger]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          echo "üìä Deployment Summary:"
          echo "Vercel trigger: ${{ needs.vercel-trigger.result }}"
          echo "Railway trigger: ${{ needs.railway-trigger.result }}"
          
          if [[ "${{ needs.vercel-trigger.result }}" == "success" && "${{ needs.railway-trigger.result }}" == "success" ]]; then
            echo "üéâ Both deployments triggered successfully!"
          else
            echo "‚ö†Ô∏è  Some deployments may have failed. Check the logs above."
          fi