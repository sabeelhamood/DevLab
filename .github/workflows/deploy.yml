name: Deploy Fullstack Application

# Trigger on every push to main branch
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  # Job 1: Deploy Frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Vercel Secrets
        run: |
          echo "🔍 Validating Vercel secrets..."
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "❌ VERCEL_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "❌ VERCEL_PROJECT_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "⚠️ VERCEL_ORG_ID is not set - will attempt deployment without it"
          fi
          echo "✅ Vercel secrets validation completed"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          echo "🚀 Deploying frontend to Vercel..."
          
          # Set Vercel environment variables
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export VERCEL_PROJECT_ID="${{ secrets.VERCEL_PROJECT_ID }}"
          
          # Deploy to Vercel (with or without ORG_ID)
          cd frontend
          if [ -n "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "Using VERCEL_ORG_ID for deployment"
            vercel --prod --yes --token="${{ secrets.VERCEL_TOKEN }}" --scope="${{ secrets.VERCEL_ORG_ID }}"
          else
            echo "Deploying without ORG_ID (using default scope)"
            vercel --prod --yes --token="${{ secrets.VERCEL_TOKEN }}"
          fi
          
          echo "✅ Frontend deployed to Vercel successfully"

      - name: Get Deployment URL
        id: vercel-url
        run: |
          echo "🔗 Getting Vercel deployment URL..."
          # This will be available in subsequent steps
          echo "url=https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app" >> $GITHUB_OUTPUT

  # Job 2: Deploy Backend to Railway
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Railway Secrets
        run: |
          echo "🔍 Validating Railway secrets..."
          if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "❌ RAILWAY_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.RAILWAY_PROJECT_ID }}" ]; then
            echo "❌ RAILWAY_PROJECT_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.RAILWAY_SERVICE_ID }}" ]; then
            echo "⚠️ RAILWAY_SERVICE_ID is not set - will attempt to find service automatically"
          fi
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "⚠️ GEMINI_API_KEY is not set - will use Railway's existing environment variable"
          fi
          echo "✅ Railway secrets validation completed"

      - name: Install Railway CLI
        run: |
          echo "📦 Installing Railway CLI..."
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Login to Railway
        run: |
          echo "🔐 Logging into Railway..."
          railway login --token="${{ secrets.RAILWAY_TOKEN }}"

      - name: Deploy to Railway
        run: |
          echo "🚂 Deploying backend to Railway..."
          
          # Set Railway environment variables (only if secrets are available)
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "Setting GEMINI_API_KEY from GitHub secrets"
            railway variables set GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" --service="${{ secrets.RAILWAY_SERVICE_ID }}"
          else
            echo "Using existing GEMINI_API_KEY from Railway environment"
          fi
          
          railway variables set NODE_ENV="production" --service="${{ secrets.RAILWAY_SERVICE_ID }}"
          railway variables set PORT="3001" --service="${{ secrets.RAILWAY_SERVICE_ID }}"
          
          # Deploy the backend
          if [ -n "${{ secrets.RAILWAY_SERVICE_ID }}" ]; then
            echo "Deploying to specific service: ${{ secrets.RAILWAY_SERVICE_ID }}"
            railway up --service="${{ secrets.RAILWAY_SERVICE_ID }}" --detach
          else
            echo "Deploying to default service in project"
            railway up --detach
          fi
          
          echo "✅ Backend deployed to Railway successfully"

      - name: Get Railway Deployment URL
        id: railway-url
        run: |
          echo "🔗 Getting Railway deployment URL..."
          # Get the service URL
          SERVICE_URL=$(railway status --service="${{ secrets.RAILWAY_SERVICE_ID }}" --json | jq -r '.deployments[0].url')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $SERVICE_URL"

  # Job 3: Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          echo "📊 Deployment Summary:"
          echo "Frontend (Vercel): ${{ needs.deploy-frontend.result }}"
          echo "Backend (Railway): ${{ needs.deploy-backend.result }}"
          
          if [[ "${{ needs.deploy-frontend.result }}" == "success" && "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "🎉 Both deployments completed successfully!"
            echo "Frontend: https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app"
            echo "Backend: Check Railway dashboard for URL"
          else
            echo "⚠️  Some deployments may have failed. Check the logs above."
            if [[ "${{ needs.deploy-frontend.result }}" != "success" ]]; then
              echo "❌ Frontend deployment failed"
            fi
            if [[ "${{ needs.deploy-backend.result }}" != "success" ]]; then
              echo "❌ Backend deployment failed"
            fi
          fi

      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend (Vercel) | ${{ needs.deploy-frontend.result }} | https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend (Railway) | ${{ needs.deploy-backend.result }} | Check Railway Dashboard |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy-frontend.result }}" == "success" && "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "✅ **All deployments completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some deployments failed. Check the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi